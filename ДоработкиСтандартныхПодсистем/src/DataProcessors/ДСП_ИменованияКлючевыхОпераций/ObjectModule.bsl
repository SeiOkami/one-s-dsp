// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ТехническиеДанные; //см. НовыеТехническиеДанные

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// см. Обработки.ДСП_ИменованияКлючевыхОпераций.ПараметрыОткрытияОбъектаКлючевойОперации
Функция ПараметрыОткрытияОбъектаКлючевойОперации(КлючеваяОперация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФормы", "");
	Результат.Вставить("ПараметрыФормы", Новый Структура);
	
	УстановитьОтборПоКлючевойОперации(КлючеваяОперация);
	ЗаполнитьДанные(Ложь);
	
	Если ЗначениеЗаполнено(КлючевыеОперации) Тогда
		СтрокаОперации = КлючевыеОперации[0];
		Результат.ИмяФормы = ОсновнаяФормаОбъектаМетаданных(СтрокаОперации);
		Если СтрокаОперации.ЭтоОтчет И ЗначениеЗаполнено(СтрокаОперации.КлючВариантаОтчета) Тогда
			Результат.ПараметрыФормы.Вставить("КлючВарианта", СтрокаОперации.КлючВариантаОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установить отбор по ключевой операции.
// 
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации
Процедура УстановитьОтборПоКлючевойОперации(КлючеваяОперация) Экспорт
	
	ДобавитьОтбор("КлючеваяОперация", КлючеваяОперация);
	
КонецПроцедуры

// Добавить отбор.
// 
// Параметры:
//  ИмяПоля - Строка
//  Значение - Произвольный
//  ВидСравнения - Строка
Процедура ДобавитьОтбор(ИмяПоля, Значение, ВидСравнения = "Равно") Экспорт
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	//@skip-check statement-type-change - Баг ЕДТ
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ВидСравнения];
	ЭлементОтбора.ПравоеЗначение = Значение;
	
КонецПроцедуры

//Интерфейс для внешнего воздействия
Процедура ВыполнитьДействияОбработки() Экспорт
	
	Сообщения.Очистить();
	
	ДобавитьСообщение("Начало выполнения обработки");
	
	Если НЕ ЗначениеЗаполнено(КлючевыеОперации) Тогда
		ЗаполнитьДанные(Истина);
	КонецЕсли;
		
	ВыполнитьПереименованиеКлючевыхОпераций();
	
	ДобавитьСообщение("Выполнение обработки завершено");

	ТекстСообщения = "";
	ТекстСообщенияОшибки = "";
	
КонецПроцедуры

// Заголовок инструмента.
// 
// Возвращаемое значение:
//  Строка
Функция ЗаголовокИнструмента() Экспорт
	
	Возврат СтрШаблон("%1 (%2)",
		Метаданные().Представление(),
		НомерВерсииИнструмента());
	 
КонецФункции

// Заполнить ключевые операции.
Процедура ЗаполнитьКлючевыеОперации() Экспорт
	
	ЗаполнитьДанные(Истина);
	
КонецПроцедуры

// см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке
Функция СведенияОВнешнейОбработке() Экспорт
    
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
    ПараметрыРегистрации.Версия = НомерВерсииИнструмента();
    ПараметрыРегистрации.БезопасныйРежим = Ложь;
    
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = Метаданные().Представление();
    Команда.Идентификатор = Метаданные().Имя;
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
    Команда.ПоказыватьОповещение = Ложь;
    
    Возврат ПараметрыРегистрации; 
    
КонецФункции

// Номер версии инструмента.
// 
// Возвращаемое значение:
//  Строка
Функция НомерВерсииИнструмента() Экспорт
    
    Возврат "1.1.1";
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Выполнение

Процедура ВыполнитьПереименованиеКлючевыхОпераций()
	
	ДанныеЗамера = НачатьЗамерВыполнения();
	
	Успешно = 0;
	Ошибок = 0;
	
	Для Каждого СтрокаПереименования Из КлючевыеОперации Цикл
		
		Если НЕ СтрокаПереименования.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПереименоватьКлючевуюОперацию(СтрокаПереименования);
			Успешно = Успешно + 1;
		Исключение
			Ошибок = Ошибок + 1;
			ПриставкаОшибки = "Не удалось переименовать КО " + СтрокаПереименования.КлючеваяОперация;
			ДобавитьСообщение(ИнформацияОбОшибке(), ПриставкаОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Если Успешно + Ошибок = 0 Тогда
		ТекстСообщения = "Нет данных для обработки";
	Иначе
		ТекстСообщения = СтрШаблон("Успешно обработано: %1, Ошибок: %2", Успешно, Ошибок);
	КонецЕсли;
	ДобавитьСообщение(ТекстСообщения);
	
	ЗавершитьЗамерВыполнения(ДанныеЗамера);
	
КонецПроцедуры

Процедура ПереименоватьКлючевуюОперацию(СтрокаПереименования)
	
	КлючеваяОперация = СтрокаПереименования.КлючеваяОперация.ПолучитьОбъект();
	КлючеваяОперация.Наименование = СтрокаПереименования.НовоеНаименование;
	КлючеваяОперация.ЗаписьИсторииДанных.КомментарийВерсии = ТехническиеДанные.КомментарийИсторииДанных;
	КлючеваяОперация.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Заполнить данные.
// 
// Параметры:
//  ТолькоТребующиеПереименования - Булево
Процедура ЗаполнитьДанные(ТолькоТребующиеПереименования)
	
	КлючевыеОперации.Очистить();
	
	КэшВариантовОтчетов = КэшВариантовОтчетов();
	КлючевыеОперацииИзБазы = КлючевыеОперацииИзБазы();
	
	Для Каждого СтрокаИзБазы Из КлючевыеОперацииИзБазы Цикл
		
		ЧастиИмени = СтрРазделить(СтрокаИзБазы.ИмяКлючевойОперации, ".:", Ложь);
		СтрокаПереименования = НоваяСтрокаПереименования(СтрокаИзБазы, ЧастиИмени);
		
		Если СтрокаПереименования = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени.Удалить(0); //Удалили вид метаданных
		ЧастиИмени.Удалить(0); //Удалили имя метаданных
		
		Если СтрокаПереименования.ЭтоОтчет И ЗначениеЗаполнено(ЧастиИмени) Тогда
			
			ПараметрыОтбора = Новый Структура("ПолноеИмяОтчета,КлючВарианта", 
				ВРег(СтрокаПереименования.ПолноеИмяМетаданных), ЧастиИмени[0]);
			СтрокиВарианта = КэшВариантовОтчетов.НайтиСтроки(ПараметрыОтбора);
			
			Если ЗначениеЗаполнено(СтрокиВарианта) Тогда
			
				СтрокаВарианта = СтрокиВарианта[0];
				
				СтрокаПереименования.КлючВариантаОтчета = СтрокаВарианта.КлючВарианта;
				СтрокаПереименования.ВариантОтчета = СтрокаВарианта.ВариантОтчета;
				
				СтрокаПереименования.НовоеНаименование = СтрШаблон("%1, вариант ""%2""", 
					СтрокаПереименования.НовоеНаименование, СтрокаВарианта.Представление);
				
				ЧастиИмени.Удалить(0); //Удалили ключ варианта
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧастиИмени) Тогда
			РазложитьСтрокиПоСловам(ЧастиИмени);
			ЧастиНаименования = СтрСоединить(ЧастиИмени, " - ");
			СтрокаПереименования.НовоеНаименование = СтрШаблон("%1 (%2)", 
				СтрокаПереименования.НовоеНаименование, ЧастиНаименования);
		КонецЕсли;
		
		Если ТолькоТребующиеПереименования 
			И СтрокаПереименования.НовоеНаименование = СтрокаИзБазы.НаименованиеКлючевойОперации Тогда
			КлючевыеОперации.Удалить(СтрокаПереименования);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКоллекциюПоНастройкамКомпоновки();
	
КонецПроцедуры

Функция НоваяСтрокаПереименования(СтрокаИзБазы, ЧастиИмени)
	
	СтрокаПереименования = Неопределено;
	
	Если ЧастиИмени.Количество() > 1 Тогда
		
		ВидМетаданных = ВидОбъектаМетаданных(ЧастиИмени[0]);
		Если ЗначениеЗаполнено(ВидМетаданных) Тогда
			
			ЭтоВнешнийОтчет = (ВидМетаданных = "ВнешнийОтчет");
			
			ИмяМетаданных = ЧастиИмени[1];
			ПолноеИмяМетаданных = СтрШаблон("%1.%2", ВидМетаданных, ЧастиИмени[1]);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
			Если ЭтоВнешнийОтчет ИЛИ ОбъектМетаданных <> Неопределено Тогда
				
				СтрокаПереименования = КлючевыеОперации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПереименования, СтрокаИзБазы);
				СтрокаПереименования.Пометка = Истина;
				СтрокаПереименования.ВидМетаданных = ВидМетаданных;
				
				Если ЭтоВнешнийОтчет Тогда
					
					СтрокаПереименования.ИмяМетаданных = ИмяМетаданных;
					СтрокаПереименования.ПолноеИмяМетаданных = ПолноеИмяМетаданных;
					СтрокаПереименования.ЭтоОтчет = Истина;
					ПредставлениеОбъектаМетаданных = ИмяМетаданных;
					
				Иначе
					
					СтрокаПереименования.ИмяМетаданных = ОбъектМетаданных.Имя;
					СтрокаПереименования.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
					СтрокаПереименования.ЭтоОтчет = Метаданные.Отчеты.Содержит(ОбъектМетаданных);
					ПредставлениеОбъектаМетаданных = ОбъектМетаданных.Представление();
						
				КонецЕсли;
				
				СтрокаПереименования.НовоеНаименование = СтрШаблон("%1 ""%2""", 
						ВидМетаданных, ПредставлениеОбъектаМетаданных);
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СтрокаПереименования;
	
КонецФункции

// Кэш вариантов отчетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ИмяОтчета - Строка
//  * КлючВарианта - Строка
//  * Представление - Строка
//  * ВариантОтчета - СправочникСсылка.ВариантыОтчетов
Функция КэшВариантовОтчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВРЕГ(ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВариантыОтчетов.Отчет) = ТИП(СТРОКА)
	|			ТОГДА СОКРЛП(ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК СТРОКА(150)))
	|		КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|			ТОГДА ""ВнешнийОтчет."" + ЕСТЬNULL(ВариантыОтчетов.Отчет.ИмяОбъекта, """")
	|		ИНАЧЕ ""Отчет."" + СОКРЛП(СТРЗАМЕНИТЬ(ЕСТЬNULL(ВариантыОтчетов.Отчет.Имя, """"), ""?"", """"))
	|	КОНЕЦ) КАК ПолноеИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Представление КАК Представление,
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолноеИмяОтчета,
	|	КлючВарианта";
	КэшВариантыОтчетов = Запрос.Выполнить().Выгрузить();
	КэшВариантыОтчетов.Индексы.Добавить("ПолноеИмяОтчета,КлючВарианта");
	
	Возврат КэшВариантыОтчетов;
	
КонецФункции

// Вид объекта метаданных.
// 
// Параметры:
//  ЧастьИмениКО - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ВидОбъектаМетаданных(Знач ЧастьИмениКО)
	
	ЧастьИмениКО = Врег(ЧастьИмениКО);
	Для Каждого КлючИЗначение Из ТехническиеДанные.КоллекцииМетаданных Цикл
		
		Если Врег(КлючИЗначение.Ключ) = ЧастьИмениКО
			ИЛИ Врег(КлючИЗначение.Значение) = ЧастьИмениКО Тогда
			
			Возврат КлючИЗначение.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Ключевые операции из базы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * КлючеваяОперация - СправочникСсылка.КлючевыеОперации
//  * ИмяКлючевойОперации - Строка
//  * НаименованиеКлючевойОперации - Строка
Функция КлючевыеОперацииИзБазы()
	
	СКД = ПолучитьМакет("ВыборкаДанных"); //СхемаКомпоновкиДанных
	Результат = Новый ТаблицаЗначений();
	СкомпоноватьРезультатОтчета(Результат, СКД, КомпоновщикНастроек.ПолучитьНастройки());
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьКоллекциюПоНастройкамКомпоновки()
	
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("КлючевыеОперации", КлючевыеОперации.Выгрузить());
	
	Результат = Новый ТаблицаЗначений();
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки); //СхемаКомпоновкиДанных
	СкомпоноватьРезультатОтчета(Результат, СхемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(), ВнешниеДанные);
	КлючевыеОперации.Загрузить(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерВремени

// Начать замер выполнения.
// 
// Возвращаемое значение:
//  Структура:
// * НачалоЗамера - см. ОценкаПроизводительности.НачатьЗамерВремени 
// * ДанныеКомментария - Соответствие из КлючИЗначение:
// ** Ключ - Произвольный
// ** Значение - Произвольный
Функция НачатьЗамерВыполнения()
	
	НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	ДанныеКомментария = Новый Соответствие;
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоЗамера", НачалоЗамера);
	Результат.Вставить("ДанныеКомментария", ДанныеКомментария);
	
	Возврат Результат;	
	
КонецФункции

// Завершить замер выполнения.
// 
// Параметры:
//  ДанныеЗамера - см. НачатьЗамерВыполнения
Процедура ЗавершитьЗамерВыполнения(ДанныеЗамера)
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		ТехническиеДанные.КлючеваяОперация, 
		ДанныеЗамера.НачалоЗамера,,
		ДанныеЗамера.ДанныеКомментария);
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

// Выполняет компоновку СКД по переданным настройкам
//
// Параметры:
//  Результат               - ТабличныйДокумент, ТаблицаЗначений -
//  СхемаКомпоновки         - СхемаКомпоновкиДанных, Строка - 
//  НастройкиКомпоновки     - НастройкиКомпоновкиДанных
//  ВнешниеНаборыДанных     - Структура, Неопределено -
//
Процедура СкомпоноватьРезультатОтчета(Результат, 
	Знач СхемаКомпоновки, Знач НастройкиКомпоновки, Знач ВнешниеНаборыДанных = Неопределено)
    
	//Определяем тип генератора
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		ВыводВКоллекциюЗначений = Истина;
		ТипГенератораВывода     = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	Иначе
		ВыводВКоллекциюЗначений = Ложь;
		ТипГенератораВывода     = Тип("ГенераторМакетаКомпоновкиДанных");
	КонецЕсли;
    
    ВременныйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    ВременныйКомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
    ВременныйКомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
    ВременныйКомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
    
    НастройкиКомпоновки = ВременныйКомпоновщикНастроек.ПолучитьНастройки();
    
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновки, НастройкиКомпоновки,,, ТипГенератораВывода);
    
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
    
    //Выводим результат
	ПроцессорВывода = Неопределено;
    Если ВыводВКоллекциюЗначений Тогда
		ПроцессорВывода    = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
	Иначе
		ПроцессорВывода    = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
	КонецЕсли;
    
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

Функция ОсновнаяФормаОбъектаМетаданных(СтрокаОперации)
	
	Если СтрокаОперации.ВидМетаданных = "Отчет" 
		ИЛИ СтрокаОперации.ВидМетаданных = "ВнешнийОтчет"
		ИЛИ СтрокаОперации.ВидМетаданных = "Обработка"
		ИЛИ СтрокаОперации.ВидМетаданных = "ВнешняяОбработка" Тогда
		
		ОкончаниеФормы = ".Форма";
		
	ИначеЕсли СтрокаОперации.ВидМетаданных = "ОбщаяФорма" Тогда
	
		ОкончаниеФормы = "";
		
	ИначеЕсли СтрокаОперации.ВидМетаданных = "ОбщийМодуль" Тогда
		
		ОкончаниеФормы = Неопределено;
	
	Иначе
		
		ОкончаниеФормы = "ФормаСписка";
		
	КонецЕсли;
	
	Если ОкончаниеФормы = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаОперации.ПолноеИмяМетаданных + ОкончаниеФормы;
	КонецЕсли;
	
КонецФункции

Процедура РазложитьСтрокиПоСловам(Строки)
	
	Для Индекс = 0 По Строки.ВГраница() Цикл
		ТекущаяСтрока = Строки[Индекс];
		Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		Строки[Индекс] = РазложитьСтрокуПоСловам(ТекущаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Разбивает строку из нескольких объединенных слов в строку с отдельными словами.
// Признаком начала нового слова считается символ в верхнем регистре.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//
// Возвращаемое значение:
//  Строка - строка, разделенная по словам.
//
// Примеры:
//  РазложитьСтрокуПоСловам("ОдинДваТри") - возвратит строку "Один два три".
//  РазложитьСтрокуПоСловам("одиндватри") - возвратит строку "одиндватри".
//
Функция РазложитьСтрокуПоСловам(Знач Строка)

	МассивСлов = Новый Массив; // Массив из Строка

	ПозицииСлов = Новый Массив; // Массив из Число
	Для ПозицияСимвола = 1 По СтрДлина(Строка) Цикл
		ТекСимвол = Сред(Строка, ПозицияСимвола, 1);
		Если ТекСимвол = ВРег(ТекСимвол) И (ОценкаПроизводительностиКлиентСервер.ТолькоКириллицаВСтроке(ТекСимвол)
			Или ОценкаПроизводительностиКлиентСервер.ТолькоЛатиницаВСтроке(ТекСимвол)) Тогда
			ПозицииСлов.Добавить(ПозицияСимвола);
		КонецЕсли;
	КонецЦикла;

	Если ПозицииСлов.Количество() > 0 Тогда
		ПредыдущаяПозиция = 0;
		Для Каждого Позиция Из ПозицииСлов Цикл
			Если ПредыдущаяПозиция > 0 Тогда
				Подстрока = Сред(Строка, ПредыдущаяПозиция, Позиция - ПредыдущаяПозиция);
				Если Не ПустаяСтрока(Подстрока) Тогда
					МассивСлов.Добавить(СокрЛП(Подстрока));
				КонецЕсли;
			КонецЕсли;
			ПредыдущаяПозиция = Позиция;
		КонецЦикла;

		Подстрока = Сред(Строка, Позиция);
		Если Не ПустаяСтрока(Подстрока) Тогда
			МассивСлов.Добавить(СокрЛП(Подстрока));
		КонецЕсли;
	КонецЕсли;

	Для Индекс = 1 По МассивСлов.ВГраница() Цикл
		МассивСлов[Индекс] = НРег(МассивСлов[Индекс]);
	КонецЦикла;

	Если МассивСлов.Количество() <> 0 Тогда
		Результат = СтрСоединить(МассивСлов, " ");
	Иначе
		Результат = Строка;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Служебное

Процедура Инициализировать()
	
	ТехническиеДанные = НовыеТехническиеДанные();
	
	ИнициализироватьКомпоновщикНастроек();
	
КонецПроцедуры

Процедура ИнициализироватьКомпоновщикНастроек()
	
	Если ЗначениеЗаполнено(АдресСхемыКомпоновки) Тогда
		Возврат; //Компоновщик уже инициализирован
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ВыводДанных"); //СхемаКомпоновкиДанных
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

// Новые технические данные.
// 
// Возвращаемое значение:
//  Структура:
// * Метаданные - ОбъектМетаданныхОбработка
// * СобытиеЖР - Строка
// * КлючеваяОперация - Строка
// * КоллекцииМетаданных - см. ИменаКоллекцийПоИменамБазовыхТипов
// * КомментарийИсторииДанных - Строка
Функция НовыеТехническиеДанные()
	
	МетаданныеИнструмента = Метаданные();
	Результат = Новый Структура;
	Результат.Вставить("Метаданные", МетаданныеИнструмента);
	Результат.Вставить("СобытиеЖР", СтрШаблон("Обработка.%1", МетаданныеИнструмента.Имя));
	Результат.Вставить("КлючеваяОперация", МетаданныеИнструмента.ПолноеИмя() + ".Выполнение");
	Результат.Вставить("КоллекцииМетаданных", ИменаКоллекцийПоИменамБазовыхТипов());
	Результат.Вставить("КомментарийИсторииДанных", "Переименование инструментом " + МетаданныеИнструмента.Представление());
	
	Возврат Результат;
	
КонецФункции

// Добавить сообщение.
// 
// Параметры:
//  ИсточникКомментария - Строка, ИнформацияОбОшибке - Комментарий
//  ДополнительнаяИнформация - Строка - Дополнительная информация
Процедура ДобавитьСообщение(Знач ИсточникКомментария, Знач ДополнительнаяИнформация = "")
	
	Если ТипЗнч(ИсточникКомментария) = Тип("ИнформацияОбОшибке") Тогда
		ЭтоИсключение = Истина;
		Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИсточникКомментария);
	ИначеЕсли ПустаяСтрока(ИсточникКомментария) Тогда
		Возврат;
	Иначе
		ЭтоИсключение = Ложь;
		Комментарий   = СокрЛП(ИсточникКомментария);
	КонецЕсли;
	
	Комментарий = ДополнительнаяИнформация + Комментарий;
		
	УровеньЗаписиЖР = УровеньЖурналаРегистрации[
		?(ЭтоИсключение, "Предупреждение", "Информация")]; // УровеньЖурналаРегистрации
	ЗаписьЖурналаРегистрации(ТехническиеДанные.СобытиеЖР, 
		УровеньЗаписиЖР, ТехническиеДанные.Метаданные,,Комментарий);
			
	ДанныеСообщения = Сообщения.Добавить();
	ДанныеСообщения.Комментарий   = Комментарий;
	ДанныеСообщения.ЭтоИсключение = ЭтоИсключение;
	ДанныеСообщения.Начало    = ТекущаяДатаСеанса();
	
	#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначения.СообщитьПользователю(Комментарий);
	#КонецЕсли

КонецПроцедуры

// Имена коллекций по именам базовых типов.
// 
// Возвращаемое значение:
//  ФиксированноеСоответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Строка
Функция ИменаКоллекцийПоИменамБазовыхТипов()
	
	ИменаКоллекций = Новый Соответствие;
	ИменаКоллекций.Вставить("Подсистема", "Подсистемы");
	ИменаКоллекций.Вставить("ОбщийМодуль", "ОбщиеМодули");
	ИменаКоллекций.Вставить("ПараметрСеанса", "ПараметрыСеанса");
	ИменаКоллекций.Вставить("Роль", "Роли");
	ИменаКоллекций.Вставить("ОбщийРеквизит", "ОбщиеРеквизиты");
	ИменаКоллекций.Вставить("ПланОбмена", "ПланыОбмена");
	ИменаКоллекций.Вставить("КритерийОтбора", "КритерииОтбора");
	ИменаКоллекций.Вставить("ПодпискаНаСобытие", "ПодпискиНаСобытия");
	ИменаКоллекций.Вставить("РегламентноеЗадание", "РегламентныеЗадания");
	ИменаКоллекций.Вставить("ФункциональнаяОпция", "ФункциональныеОпции");
	ИменаКоллекций.Вставить("ПараметрФункциональныхОпций", "ПараметрыФункциональныхОпций");
	ИменаКоллекций.Вставить("ОпределяемыйТип", "ОпределяемыеТипы");
	ИменаКоллекций.Вставить("ХранилищеНастроек", "ХранилищаНастроек");
	ИменаКоллекций.Вставить("ОбщаяФорма", "ОбщиеФормы");
	ИменаКоллекций.Вставить("ОбщаяКоманда", "ОбщиеКоманды");
	ИменаКоллекций.Вставить("ГруппаКоманд", "ГруппыКоманд");
	ИменаКоллекций.Вставить("ОбщийМакет", "ОбщиеМакеты");
	ИменаКоллекций.Вставить("ОбщаяКартинка", "ОбщиеКартинки");
	ИменаКоллекций.Вставить("ПакетXDTO", "ПакетыXDTO");
	ИменаКоллекций.Вставить("WebСервис", "WebСервисы");
	ИменаКоллекций.Вставить("HTTPСервис", "HTTPСервисы");
	ИменаКоллекций.Вставить("WSСсылка", "WSСсылки");
	ИменаКоллекций.Вставить("СервисИнтеграции", "СервисыИнтеграции");
	ИменаКоллекций.Вставить("ЭлементСтиля", "ЭлементыСтиля");
	ИменаКоллекций.Вставить("Стиль", "Стили");
	ИменаКоллекций.Вставить("Язык", "Языки");
	ИменаКоллекций.Вставить("Константа", "Константы");
	ИменаКоллекций.Вставить("Справочник", "Справочники");
	ИменаКоллекций.Вставить("Документ", "Документы");
	ИменаКоллекций.Вставить("Последовательность", "Последовательности");
	ИменаКоллекций.Вставить("ЖурналДокументов", "ЖурналыДокументов");
	ИменаКоллекций.Вставить("Перечисление", "Перечисления");
	ИменаКоллекций.Вставить("Отчет", "Отчеты");
	ИменаКоллекций.Вставить("ВнешнийОтчет", "ВнешниеОтчеты");
	ИменаКоллекций.Вставить("Обработка", "Обработки");
	ИменаКоллекций.Вставить("ВнешняяОбработка", "ВнешниеОбработки");
	ИменаКоллекций.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	ИменаКоллекций.Вставить("ПланСчетов", "ПланыСчетов");
	ИменаКоллекций.Вставить("ПланВидовРасчета", "ПланыВидовРасчета");
	ИменаКоллекций.Вставить("РегистрСведений", "РегистрыСведений");
	ИменаКоллекций.Вставить("РегистрНакопления", "РегистрыНакопления");
	ИменаКоллекций.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
	ИменаКоллекций.Вставить("РегистрРасчета", "РегистрыРасчета");
	ИменаКоллекций.Вставить("БизнесПроцесс", "БизнесПроцессы");
	ИменаКоллекций.Вставить("Задача", "Задачи");
	ИменаКоллекций.Вставить("ВнешниеИсточникиДанных", "ВнешнийИсточникДанных");
	
	Возврат Новый ФиксированноеСоответствие(ИменаКоллекций);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

Инициализировать();

#КонецОбласти

#КонецЕсли