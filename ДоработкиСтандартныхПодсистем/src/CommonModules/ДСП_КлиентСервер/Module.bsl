// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Возвращает настройки расширения. Кэширует значение на время вызова (указанного в настройках).
// По умолчанию метод проверяет время последнего получения настроек и обновляет их при необходимости.
// На клиенте настройки кэшируются в переменной (чтобы при завершении работы системы можно было не обращаться к ПовтИсп с вызовом сервера)
// На сервере используется кэш повт. использования.
// 
// Параметры:
//  НужноОбновить - Неопределено, Булево - Требуется ли обновить настройки из базы
//  
// Возвращаемое значение: 
//  см. НовыйНастройкиРасширения
Функция НастройкиРасширения(Знач НужноОбновить = Неопределено) Экспорт

	#Если Клиент Тогда
		Возврат ДСП_Клиент.НастройкиРасширения(НужноОбновить);
	#Иначе
		Возврат ДСП_Сервер.НастройкиРасширения(НужноОбновить);
	#КонецЕсли
	
КонецФункции

// Настройки нужно обновить.
// 
// Параметры:
//  КэшированныеНастройки - см. НовыйКэшированныеНастройкиРасширения
// 
// Возвращаемое значение:
//  Булево
Функция НастройкиНужноОбновить(КэшированныеНастройки) Экспорт

	ДатаСеанса = ДатаСеанса();
	РазницаМинут = (ДатаСеанса - КэшированныеНастройки.ТехническиеДанные.ДатаОбновления) * 60;
	
	Возврат КэшированныеНастройки.Настройки.Общие.ЧастотаОбновленияНастроек < РазницаМинут;
	
КонецФункции

// Настройка "Фиксировать быстрые формирования отчетов" подсистемы "Оценка производительности".
// 
// Возвращаемое значение:
//  Булево
Функция Настройка_ОценкаПроизводительности_ФиксироватьБыстрыеФормированияОтчетов() Экспорт
	
	НастройкиПодсистемы = НастройкиРасширения().ОценкаПроизводительности;
	
	Возврат НастройкиПодсистемы.Использовать 
		И НастройкиПодсистемы.ФиксироватьБыстрыеФормированияОтчетов;
	
КонецФункции

// Настройка "Фиксировать замеры перед завершением сеанса" подсистемы "Оценка производительности".
// 
// Параметры:
//  НужноОбновить - см. НастройкиРасширения.НужноОбновить
// 
// Возвращаемое значение:
//  Булево
Функция Настройка_ОценкаПроизводительности_ФиксироватьЗамерыПередЗавершениемСеанса(Знач НужноОбновить = Неопределено) Экспорт
	
	НастройкиПодсистемы = НастройкиРасширения(НужноОбновить).ОценкаПроизводительности;
	
	Возврат НастройкиПодсистемы.Использовать 
		И НастройкиПодсистемы.ФиксироватьЗамерыПередЗавершениемСеанса;
	
КонецФункции

#КонецОбласти

#Область ОписанияТипов

// Конструктор объекта Кэшированные настройки расширения.
// 
// Параметры:
//  Настройки - см. НовыйНастройкиРасширения
// 
// Возвращаемое значение:
//  Структура:
// * Настройки - см. НовыйНастройкиРасширения
// * ТехническиеДанные - см. НовыйТехническиеДанныеНастроек
Функция НовыйКэшированныеНастройкиРасширения(Настройки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Настройки", Настройки);
	Результат.Вставить("ТехническиеДанные", НовыйТехническиеДанныеНастроек());
	
	Возврат Результат;
	
КонецФункции

// Конструктор объекта Настройки расширения.
// 
// Возвращаемое значение:
//  Структура:
// * Общие - см. НовыйОбщиеНастройки
// * ОценкаПроизводительности - см. НовыйНастройкиПодсистемыОценкаПроизводительности
Функция НовыйНастройкиРасширения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Общие", НовыйОбщиеНастройки());
	Результат.Вставить("ОценкаПроизводительности", НовыйНастройкиПодсистемыОценкаПроизводительности());
	
	Возврат Результат;
	
КонецФункции

// Конструктор объекта Настройки подсистемы "Оценка производительности".
// 
// Возвращаемое значение:
//  Структура:
// * Использовать - Булево - Использовать ли доработки подсистемы
// * ФиксироватьБыстрыеФормированияОтчетов - Булево - Нужно ли фиксировать "быстрые" формирования отчетов в замерах (БСП не фиксирует)
// * ФиксироватьЗамерыПередЗавершениемСеанса - Булево - Нужно ли фиксировать замеры перед завершением сеанса (БСП не фиксирует)
Функция НовыйНастройкиПодсистемыОценкаПроизводительности() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Использовать", Ложь);
	Результат.Вставить("ФиксироватьБыстрыеФормированияОтчетов", Ложь);
	Результат.Вставить("ФиксироватьЗамерыПередЗавершениемСеанса", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Новый общие настройки.
// 
// Возвращаемое значение:
//  Структура:
// * ЧастотаОбновленияНастроек - Число
Функция НовыйОбщиеНастройки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЧастотаОбновленияНастроек", 60);
	
	Возврат Результат;
	
КонецФункции

// Новый технические данные настроек.
// 
// Возвращаемое значение:
//  Структура:
// * ДатаОбновления - Дата - Дата получения настроек
Функция НовыйТехническиеДанныеНастроек() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаОбновления", ДатаСеанса());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Ключи

Функция КлючНастроекРасширения() Экспорт
	
	Возврат "Настройки";
	
КонецФункции

Функция ИмяРасширения() Экспорт
	
	Возврат "ДоработкиСтандартныхПодсистем";
	
КонецФункции

#КонецОбласти

#Область ОбщегоНазначения

// Заполнить структуру рекурсивно.
// Источник: https://github.com/SeiOkami/CollectionMethodsOneS/issues/43
//  
// Параметры:
//  Приемник - Структура
//  Источник - Структура
//  ИгнорироватьНеопределено - Булево - Игнорировать ли значение Неопределено из Источника
//  Дополнять - Булево - Нужно ли дополнять несуществующими в приемнике свойствами
//    
Процедура ЗаполнитьСтруктуруРекурсивно(Знач Приемник, Знач Источник, 
	Знач ИгнорироватьНеопределено = Ложь, Знач Дополнять = Ложь) Экспорт
	
	ТипСтруктура = Тип("Структура");
	Если ТипЗнч(Приемник) <> ТипСтруктура
		ИЛИ ТипЗнч(Источник) <> ТипСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Источник Цикл
		
		ТекущийКлюч = КлючИЗначение.Ключ;
		ЗначениеИсточника = КлючИЗначение.Значение; // Структура, Произвольный
		ЗначениеПриемника = Неопределено; 
		Если Приемник.Свойство(ТекущийКлюч, ЗначениеПриемника) Тогда
			Если ТипЗнч(ЗначениеПриемника) = Тип("Структура") Тогда
				ЗаполнитьСтруктуруРекурсивно(ЗначениеПриемника, ЗначениеИсточника, ИгнорироватьНеопределено);
			ИначеЕсли ЗначениеИсточника = Неопределено И ИгнорироватьНеопределено Тогда
				Продолжить;
			Иначе
				Приемник[ТекущийКлюч] = ЗначениеИсточника;
			КонецЕсли;
		ИначеЕсли Дополнять Тогда
			Приемник.Вставить(ТекущийКлюч, ЗначениеИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дата сеанса.
// 
// Возвращаемое значение:
//  Дата
Функция ДатаСеанса() Экспорт
	
	#Если Клиент Тогда
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#Иначе
		Возврат ТекущаяДатаСеанса();
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#КонецОбласти
